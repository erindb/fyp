

var costs = {
	lengthCost: function(story) {
		return story.length;
	},
	noCost: function(story) {
		return 0;
	}
};

var literalListener = cache(function (parameters) {
	var story = parameters.story;
	var dist = parameters.dist;
	var isSubsequence = function(sub, full) {
		var fullstr = full.join('');
		var substr = sub.join('.*');
		return stories.regex.match(substr, fullstr) != null;
	}
	return Infer(
		{
			method: 'enumerate',
		},
		function() {
			var fullSequence = sample(dist);
			condition( isSubsequence(story, fullSequence) )
			return fullSequence;
		}
	);
});

var storyteller = function() {};

var storyteller = cache(function(parameters) {

	var fullSequence = parameters.fullSequence;
	var dist = parameters.dist;
	var cost = parameters.cost;
	var informative = parameters.informative;

	return Infer(
		{ method: 'enumerate' },
		function() {
			var subsequence = filter(function(sentence) {return flip(0.5);}, fullSequence);
			var interpretation = literalListener({story: subsequence, dist: dist});
			
			// (if informative)
			// higher score if actual fullSequence has high score
			factor( informative ? interpretation.score(fullSequence) : 0 );
			
			// lower score if subsequence is costly
			factor( - cost(subsequence) );
			
			return subsequence;
		}
	);
})

var pragmaticListener = function(parameters) {
	var assumeInformativeSpeaker = parameters.assumeInformativeSpeaker;
	var dist = parameters.dist;
	var speakerCost = parameters.speakerCost;
	var story = parameters.story;

	return Infer(
		{method: 'enumerate'},
		function() {
			var fullSequence = sample(dist);
			var storyDistribution = storyteller({
				fullSequence: fullSequence,
				dist: dist,
				cost: speakerCost,
				informative: assumeInformativeSpeaker
			});
			factor( storyDistribution.score(story) );
			return fullSequence;
		}
	);
};

"storytelling loaded"